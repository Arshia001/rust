name: CI
on: 
  push:
    branches:
      - '**'
  pull_request:
  workflow_call:
jobs:
  build-libc:
    runs-on: self-hosted-ubuntu
    steps:
      - name: show git config
        run: |
          env
          cat ~/.config/git/config || true
          cat ~/.gitconfig || true
          ls -lha ./wasix-libc || true

      - name: Check out wasix-libc
        uses: actions/checkout@v3
        with:
          repository: john-sharratt/wasix-libc
          ref: main
          path: wasix-libc
          submodules: 'recursive'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy

      - name: Check out cargo-wasix
        uses: actions/checkout@v3
        with:
          repository: john-sharratt/cargo-wasix
          ref: main
          path: cargo-wasix

      - name: Build
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/cargo-wasix
          WASIX_NO_UPDATE_REPOS=1 WASIX_BUILD_DIR=$GITHUB_WORKSPACE WASIX_COMPONENTS=libc cargo run -- wasix build-toolchain

          # Workaround for preserving artifact directory structure
          # See https://github.com/actions/upload-artifact/issues/174
          touch $GITHUB_WORKSPACE/.stub

      - name: Archive build output
        uses: actions/upload-artifact@v3
        with:
          name: wasix-libc
          path: |
            .stub
            wasix-libc/sysroot32
            wasix-libc/sysroot64

  build-rust:
    needs: build-libc
    strategy:
      matrix:
        os: [self-hosted-ubuntu, macos-12, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download wasix-libc artifact
        uses: actions/download-artifact@v3
        with:
          name: wasix-libc

      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          path: wasix-rust
          submodules: 'recursive'
          # Don't clean so downloaded LLVM etc can be reused.
          clean: false

      # We need the full history for the main repo so the build tooling can
      # determine the cached LLVM download.
      - name: Fetch full branch history
        shell: bash
        run: |
          cd wasix-rust
          git fetch --unshallow origin $(git branch --show-current)

          echo "Branch history fetched!"
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy

      - name: Check out cargo-wasix
        uses: actions/checkout@v3
        with:
          repository: john-sharratt/cargo-wasix
          ref: main
          path: cargo-wasix

      # Linux!

      - name: Build (Linux)
        shell: bash
        if: matrix.os == 'self-hosted-ubuntu'
        env:
          WASIX_NO_UPDATE_REPOS: '1'
          WASIX_COMPONENTS: rust
          WASIX_RUST_HOST: x86_64-unknown-linux-gnu
        run: |
          cd cargo-wasix
          # NOTE: must unset GITHUB_ACTIONS env var, because Rst bootstrap checks for it.
          # (see bootstrap config.rs)
          GITHUB_ACTIONS=false WASIX_BUILD_DIR=$GITHUB_WORKSPACE cargo run -- wasix build-toolchain

      - name: Archive build output (Linux)
        uses: actions/upload-artifact@v3
        if: matrix.os == 'self-hosted-ubuntu'
        with:
          name: rust-toolchain-x86_64-unknown-linux-gnu
          path: |
            wasix-rust/build/x86_64-unknown-linux-gnu/stage2
            !wasix-rust/build/x86_64-unknown-linux-gnu/stage2/lib/rustlib/src

      # Mac - x86

      - name: Setup (Mac OS)
        shell: bash
        if: matrix.os == 'macos-12'
        run: |
          brew update
          # Need ninja for building llvm (for aarch64 cross compile)
          brew install ninja

      - name: Build (Mac Os, x86)
        shell: bash
        if: matrix.os == 'macos-12'
        # TODO: remove once mac os is validated!
        continue-on-error: true
        env:
          WASIX_NO_UPDATE_REPOS: '1'
          GITHUB_ACTIONS: 'false'
          WASIX_COMPONENTS: rust
          WASIX_RUST_HOST: x86_64-apple-darwin
        run: |
          cd cargo-wasix
          # NOTE: must unset GITHUB_ACTIONS env var, because Rst bootstrap checks for it.
          # (see bootstrap config.rs)
          GITHUB_ACTIONS=false WASIX_BUILD_DIR=$GITHUB_WORKSPACE cargo run -- wasix build-toolchain

      - name: Archive build output (Mac OS - x86)
        uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-12'
        with:
          name: rust-toolchain-x86_64-apple-darwin
          path: wasix-rust/build/x86_64-apple-darwin/stage2

      # Mac - aarch64

      - name: Build (Mac Os, aarch64)
        shell: bash
        if: matrix.os == 'macos-12'
        # TODO: remove once mac os is validated!
        continue-on-error: true
        env:
          WASIX_NO_UPDATE_REPOS: '1'
          GITHUB_ACTIONS: 'false'
          WASIX_COMPONENTS: rust
          WASIX_RUST_HOST: aarch64-apple-darwin
        run: |
          cd cargo-wasix
          # NOTE: must unset GITHUB_ACTIONS env var, because Rst bootstrap checks for it.
          # (see bootstrap config.rs)
          GITHUB_ACTIONS=false WASIX_BUILD_DIR=$GITHUB_WORKSPACE cargo run -- wasix build-toolchain

      - name: Archive build output (Mac OS - aarch64)
        uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-12'
        with:
          name: rust-toolchain-aarch64-apple-darwin
          path: wasix-rust/build/aarch64-apple-darwin/stage2

      # Windows

      - name: Build (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        # TODO: remove once Windows is validated!
        continue-on-error: true
        env:
          WASIX_NO_UPDATE_REPOS: '1'
          WASIX_COMPONENTS: rust
          # WASIX_RUST_HOST: x86_64-pc-windows-gnu
          WASIX_RUST_HOST: x86_64-pc-windows-msvc
        run: |
          cd cargo-wasix
          # NOTE: must unset GITHUB_ACTIONS env var, because Rst bootstrap checks for it.
          # (see bootstrap config.rs)
          GITHUB_ACTIONS=false WASIX_BUILD_DIR=$GITHUB_WORKSPACE cargo run -- wasix build-toolchain

      - name: Archive build output (Windows)
        uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: rust-toolchain-x86_64-pc-windows-msvc
          path: |
            wasix-rust/build/x86_64-pc-windows-msvc/stage2
            !wasix-rust/build/x86_64-pc-windows-msvc/stage2/lib/rustlib/src
